// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file grpc_market.proto (package dofus_market.grpc_market, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message dofus_market.grpc_market.BrokenRune
 */
export class BrokenRune extends Message<BrokenRune> {
  /**
   * @generated from field: string rune = 1;
   */
  rune = "";

  /**
   * @generated from field: float quantity_ra = 2;
   */
  quantityRa = 0;

  /**
   * @generated from field: int32 prix_ra = 3;
   */
  prixRa = 0;

  /**
   * @generated from field: float quantity_pa = 4;
   */
  quantityPa = 0;

  /**
   * @generated from field: int32 prix_pa = 5;
   */
  prixPa = 0;

  /**
   * @generated from field: float quantity_ba = 6;
   */
  quantityBa = 0;

  /**
   * @generated from field: int32 prix_ba = 7;
   */
  prixBa = 0;

  constructor(data?: PartialMessage<BrokenRune>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.BrokenRune";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rune", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity_ra", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "prix_ra", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "quantity_pa", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "prix_pa", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "quantity_ba", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "prix_ba", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrokenRune {
    return new BrokenRune().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrokenRune {
    return new BrokenRune().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrokenRune {
    return new BrokenRune().fromJsonString(jsonString, options);
  }

  static equals(a: BrokenRune | PlainMessage<BrokenRune> | undefined, b: BrokenRune | PlainMessage<BrokenRune> | undefined): boolean {
    return proto3.util.equals(BrokenRune, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.Rune
 */
export class Rune extends Message<Rune> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 prix_ra = 2;
   */
  prixRa = 0;

  /**
   * @generated from field: int32 prix_pa = 3;
   */
  prixPa = 0;

  /**
   * @generated from field: int32 prix_ba = 4;
   */
  prixBa = 0;

  constructor(data?: PartialMessage<Rune>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.Rune";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prix_ra", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "prix_pa", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "prix_ba", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rune {
    return new Rune().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rune {
    return new Rune().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rune {
    return new Rune().fromJsonString(jsonString, options);
  }

  static equals(a: Rune | PlainMessage<Rune> | undefined, b: Rune | PlainMessage<Rune> | undefined): boolean {
    return proto3.util.equals(Rune, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.Caracteristique
 */
export class Caracteristique extends Message<Caracteristique> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 min = 2;
   */
  min = 0;

  /**
   * @generated from field: int32 max = 3;
   */
  max = 0;

  /**
   * @generated from field: dofus_market.grpc_market.Rune rune = 4;
   */
  rune?: Rune;

  constructor(data?: PartialMessage<Caracteristique>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.Caracteristique";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "rune", kind: "message", T: Rune },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Caracteristique {
    return new Caracteristique().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Caracteristique {
    return new Caracteristique().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Caracteristique {
    return new Caracteristique().fromJsonString(jsonString, options);
  }

  static equals(a: Caracteristique | PlainMessage<Caracteristique> | undefined, b: Caracteristique | PlainMessage<Caracteristique> | undefined): boolean {
    return proto3.util.equals(Caracteristique, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.Ingredient
 */
export class Ingredient extends Message<Ingredient> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: int32 price = 3;
   */
  price = 0;

  /**
   * @generated from field: repeated dofus_market.grpc_market.Ingredient ingredients = 4;
   */
  ingredients: Ingredient[] = [];

  /**
   * @generated from field: optional int32 nb_objet = 5;
   */
  nbObjet?: number;

  /**
   * @generated from field: optional float cout_fabrication = 6;
   */
  coutFabrication?: number;

  /**
   * @generated from field: optional float rentabilite = 7;
   */
  rentabilite?: number;

  constructor(data?: PartialMessage<Ingredient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.Ingredient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "ingredients", kind: "message", T: Ingredient, repeated: true },
    { no: 5, name: "nb_objet", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "cout_fabrication", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 7, name: "rentabilite", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ingredient {
    return new Ingredient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ingredient {
    return new Ingredient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ingredient {
    return new Ingredient().fromJsonString(jsonString, options);
  }

  static equals(a: Ingredient | PlainMessage<Ingredient> | undefined, b: Ingredient | PlainMessage<Ingredient> | undefined): boolean {
    return proto3.util.equals(Ingredient, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.EquipementDetailsRequest
 */
export class EquipementDetailsRequest extends Message<EquipementDetailsRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<EquipementDetailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.EquipementDetailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipementDetailsRequest {
    return new EquipementDetailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipementDetailsRequest {
    return new EquipementDetailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipementDetailsRequest {
    return new EquipementDetailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquipementDetailsRequest | PlainMessage<EquipementDetailsRequest> | undefined, b: EquipementDetailsRequest | PlainMessage<EquipementDetailsRequest> | undefined): boolean {
    return proto3.util.equals(EquipementDetailsRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.EquipementDetailsResponse
 */
export class EquipementDetailsResponse extends Message<EquipementDetailsResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 level = 2;
   */
  level = 0;

  /**
   * @generated from field: float cout_fabrication = 3;
   */
  coutFabrication = 0;

  /**
   * @generated from field: float gain_estime = 4;
   */
  gainEstime = 0;

  /**
   * @generated from field: float rentabilite = 5;
   */
  rentabilite = 0;

  /**
   * @generated from field: int32 nb_objet = 6;
   */
  nbObjet = 0;

  /**
   * @generated from field: string metier = 7;
   */
  metier = "";

  /**
   * @generated from field: repeated dofus_market.grpc_market.Caracteristique effects = 8;
   */
  effects: Caracteristique[] = [];

  /**
   * @generated from field: repeated dofus_market.grpc_market.Ingredient ingredients = 9;
   */
  ingredients: Ingredient[] = [];

  /**
   * @generated from field: repeated dofus_market.grpc_market.BrokenRune brisage = 10;
   */
  brisage: BrokenRune[] = [];

  constructor(data?: PartialMessage<EquipementDetailsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.EquipementDetailsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cout_fabrication", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "gain_estime", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "rentabilite", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "nb_objet", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "metier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "effects", kind: "message", T: Caracteristique, repeated: true },
    { no: 9, name: "ingredients", kind: "message", T: Ingredient, repeated: true },
    { no: 10, name: "brisage", kind: "message", T: BrokenRune, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipementDetailsResponse {
    return new EquipementDetailsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipementDetailsResponse {
    return new EquipementDetailsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipementDetailsResponse {
    return new EquipementDetailsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EquipementDetailsResponse | PlainMessage<EquipementDetailsResponse> | undefined, b: EquipementDetailsResponse | PlainMessage<EquipementDetailsResponse> | undefined): boolean {
    return proto3.util.equals(EquipementDetailsResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.EquipementListRequest
 */
export class EquipementListRequest extends Message<EquipementListRequest> {
  constructor(data?: PartialMessage<EquipementListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.EquipementListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipementListRequest {
    return new EquipementListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipementListRequest {
    return new EquipementListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipementListRequest {
    return new EquipementListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquipementListRequest | PlainMessage<EquipementListRequest> | undefined, b: EquipementListRequest | PlainMessage<EquipementListRequest> | undefined): boolean {
    return proto3.util.equals(EquipementListRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.EquipementListResponse
 */
export class EquipementListResponse extends Message<EquipementListResponse> {
  /**
   * @generated from field: repeated dofus_market.grpc_market.EquipementResponse results = 1;
   */
  results: EquipementResponse[] = [];

  /**
   * @generated from field: int32 count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<EquipementListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.EquipementListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: EquipementResponse, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipementListResponse {
    return new EquipementListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipementListResponse {
    return new EquipementListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipementListResponse {
    return new EquipementListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EquipementListResponse | PlainMessage<EquipementListResponse> | undefined, b: EquipementListResponse | PlainMessage<EquipementListResponse> | undefined): boolean {
    return proto3.util.equals(EquipementListResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.EquipementResponse
 */
export class EquipementResponse extends Message<EquipementResponse> {
  /**
   * @generated from field: string metier = 7;
   */
  metier = "";

  /**
   * @generated from field: string name = 8;
   */
  name = "";

  /**
   * @generated from field: int32 level = 9;
   */
  level = 0;

  /**
   * @generated from field: float cout_fabrication = 10;
   */
  coutFabrication = 0;

  /**
   * @generated from field: float gain_estime = 11;
   */
  gainEstime = 0;

  /**
   * @generated from field: float rentabilite = 12;
   */
  rentabilite = 0;

  /**
   * @generated from field: int32 nb_objet = 13;
   */
  nbObjet = 0;

  constructor(data?: PartialMessage<EquipementResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.EquipementResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 7, name: "metier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "cout_fabrication", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 11, name: "gain_estime", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 12, name: "rentabilite", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 13, name: "nb_objet", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipementResponse {
    return new EquipementResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipementResponse {
    return new EquipementResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipementResponse {
    return new EquipementResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EquipementResponse | PlainMessage<EquipementResponse> | undefined, b: EquipementResponse | PlainMessage<EquipementResponse> | undefined): boolean {
    return proto3.util.equals(EquipementResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.EquipementRetrieveRequest
 */
export class EquipementRetrieveRequest extends Message<EquipementRetrieveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<EquipementRetrieveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.EquipementRetrieveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipementRetrieveRequest {
    return new EquipementRetrieveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipementRetrieveRequest {
    return new EquipementRetrieveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipementRetrieveRequest {
    return new EquipementRetrieveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EquipementRetrieveRequest | PlainMessage<EquipementRetrieveRequest> | undefined, b: EquipementRetrieveRequest | PlainMessage<EquipementRetrieveRequest> | undefined): boolean {
    return proto3.util.equals(EquipementRetrieveRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientDestroyRequest
 */
export class IngredientDestroyRequest extends Message<IngredientDestroyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<IngredientDestroyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientDestroyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientDestroyRequest {
    return new IngredientDestroyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientDestroyRequest {
    return new IngredientDestroyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientDestroyRequest {
    return new IngredientDestroyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientDestroyRequest | PlainMessage<IngredientDestroyRequest> | undefined, b: IngredientDestroyRequest | PlainMessage<IngredientDestroyRequest> | undefined): boolean {
    return proto3.util.equals(IngredientDestroyRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientForCraftDestroyRequest
 */
export class IngredientForCraftDestroyRequest extends Message<IngredientForCraftDestroyRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<IngredientForCraftDestroyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientForCraftDestroyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientForCraftDestroyRequest {
    return new IngredientForCraftDestroyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientForCraftDestroyRequest {
    return new IngredientForCraftDestroyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientForCraftDestroyRequest {
    return new IngredientForCraftDestroyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientForCraftDestroyRequest | PlainMessage<IngredientForCraftDestroyRequest> | undefined, b: IngredientForCraftDestroyRequest | PlainMessage<IngredientForCraftDestroyRequest> | undefined): boolean {
    return proto3.util.equals(IngredientForCraftDestroyRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientForCraftListRequest
 */
export class IngredientForCraftListRequest extends Message<IngredientForCraftListRequest> {
  constructor(data?: PartialMessage<IngredientForCraftListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientForCraftListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientForCraftListRequest {
    return new IngredientForCraftListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientForCraftListRequest {
    return new IngredientForCraftListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientForCraftListRequest {
    return new IngredientForCraftListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientForCraftListRequest | PlainMessage<IngredientForCraftListRequest> | undefined, b: IngredientForCraftListRequest | PlainMessage<IngredientForCraftListRequest> | undefined): boolean {
    return proto3.util.equals(IngredientForCraftListRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientForCraftListResponse
 */
export class IngredientForCraftListResponse extends Message<IngredientForCraftListResponse> {
  /**
   * @generated from field: repeated dofus_market.grpc_market.IngredientForCraftResponse results = 1;
   */
  results: IngredientForCraftResponse[] = [];

  constructor(data?: PartialMessage<IngredientForCraftListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientForCraftListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: IngredientForCraftResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientForCraftListResponse {
    return new IngredientForCraftListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientForCraftListResponse {
    return new IngredientForCraftListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientForCraftListResponse {
    return new IngredientForCraftListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientForCraftListResponse | PlainMessage<IngredientForCraftListResponse> | undefined, b: IngredientForCraftListResponse | PlainMessage<IngredientForCraftListResponse> | undefined): boolean {
    return proto3.util.equals(IngredientForCraftListResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientForCraftPartialUpdateRequest
 */
export class IngredientForCraftPartialUpdateRequest extends Message<IngredientForCraftPartialUpdateRequest> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: int32 quantity = 3;
   */
  quantity = 0;

  /**
   * @generated from field: string ingredient = 4;
   */
  ingredient = "";

  /**
   * @generated from field: repeated string _partial_update_fields = 5;
   */
  PartialUpdateFields: string[] = [];

  constructor(data?: PartialMessage<IngredientForCraftPartialUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientForCraftPartialUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "_partial_update_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientForCraftPartialUpdateRequest {
    return new IngredientForCraftPartialUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientForCraftPartialUpdateRequest {
    return new IngredientForCraftPartialUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientForCraftPartialUpdateRequest {
    return new IngredientForCraftPartialUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientForCraftPartialUpdateRequest | PlainMessage<IngredientForCraftPartialUpdateRequest> | undefined, b: IngredientForCraftPartialUpdateRequest | PlainMessage<IngredientForCraftPartialUpdateRequest> | undefined): boolean {
    return proto3.util.equals(IngredientForCraftPartialUpdateRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientForCraftRequest
 */
export class IngredientForCraftRequest extends Message<IngredientForCraftRequest> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: int32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: string ingredient = 3;
   */
  ingredient = "";

  constructor(data?: PartialMessage<IngredientForCraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientForCraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientForCraftRequest {
    return new IngredientForCraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientForCraftRequest {
    return new IngredientForCraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientForCraftRequest {
    return new IngredientForCraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientForCraftRequest | PlainMessage<IngredientForCraftRequest> | undefined, b: IngredientForCraftRequest | PlainMessage<IngredientForCraftRequest> | undefined): boolean {
    return proto3.util.equals(IngredientForCraftRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientForCraftResponse
 */
export class IngredientForCraftResponse extends Message<IngredientForCraftResponse> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: int32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: string ingredient = 3;
   */
  ingredient = "";

  constructor(data?: PartialMessage<IngredientForCraftResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientForCraftResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientForCraftResponse {
    return new IngredientForCraftResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientForCraftResponse {
    return new IngredientForCraftResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientForCraftResponse {
    return new IngredientForCraftResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientForCraftResponse | PlainMessage<IngredientForCraftResponse> | undefined, b: IngredientForCraftResponse | PlainMessage<IngredientForCraftResponse> | undefined): boolean {
    return proto3.util.equals(IngredientForCraftResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientForCraftRetrieveRequest
 */
export class IngredientForCraftRetrieveRequest extends Message<IngredientForCraftRetrieveRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<IngredientForCraftRetrieveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientForCraftRetrieveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientForCraftRetrieveRequest {
    return new IngredientForCraftRetrieveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientForCraftRetrieveRequest {
    return new IngredientForCraftRetrieveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientForCraftRetrieveRequest {
    return new IngredientForCraftRetrieveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientForCraftRetrieveRequest | PlainMessage<IngredientForCraftRetrieveRequest> | undefined, b: IngredientForCraftRetrieveRequest | PlainMessage<IngredientForCraftRetrieveRequest> | undefined): boolean {
    return proto3.util.equals(IngredientForCraftRetrieveRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientListRequest
 */
export class IngredientListRequest extends Message<IngredientListRequest> {
  constructor(data?: PartialMessage<IngredientListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientListRequest {
    return new IngredientListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientListRequest {
    return new IngredientListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientListRequest {
    return new IngredientListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientListRequest | PlainMessage<IngredientListRequest> | undefined, b: IngredientListRequest | PlainMessage<IngredientListRequest> | undefined): boolean {
    return proto3.util.equals(IngredientListRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientListResponse
 */
export class IngredientListResponse extends Message<IngredientListResponse> {
  /**
   * @generated from field: repeated dofus_market.grpc_market.IngredientResponse results = 1;
   */
  results: IngredientResponse[] = [];

  constructor(data?: PartialMessage<IngredientListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: IngredientResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientListResponse {
    return new IngredientListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientListResponse {
    return new IngredientListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientListResponse {
    return new IngredientListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientListResponse | PlainMessage<IngredientListResponse> | undefined, b: IngredientListResponse | PlainMessage<IngredientListResponse> | undefined): boolean {
    return proto3.util.equals(IngredientListResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientPartialUpdateRequest
 */
export class IngredientPartialUpdateRequest extends Message<IngredientPartialUpdateRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional int32 price = 3;
   */
  price?: number;

  /**
   * @generated from field: repeated string _partial_update_fields = 4;
   */
  PartialUpdateFields: string[] = [];

  constructor(data?: PartialMessage<IngredientPartialUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientPartialUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "_partial_update_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientPartialUpdateRequest {
    return new IngredientPartialUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientPartialUpdateRequest {
    return new IngredientPartialUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientPartialUpdateRequest {
    return new IngredientPartialUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientPartialUpdateRequest | PlainMessage<IngredientPartialUpdateRequest> | undefined, b: IngredientPartialUpdateRequest | PlainMessage<IngredientPartialUpdateRequest> | undefined): boolean {
    return proto3.util.equals(IngredientPartialUpdateRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientRequest
 */
export class IngredientRequest extends Message<IngredientRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional int32 price = 2;
   */
  price?: number;

  constructor(data?: PartialMessage<IngredientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientRequest {
    return new IngredientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientRequest {
    return new IngredientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientRequest {
    return new IngredientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientRequest | PlainMessage<IngredientRequest> | undefined, b: IngredientRequest | PlainMessage<IngredientRequest> | undefined): boolean {
    return proto3.util.equals(IngredientRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientResponse
 */
export class IngredientResponse extends Message<IngredientResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional int32 price = 2;
   */
  price?: number;

  constructor(data?: PartialMessage<IngredientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientResponse {
    return new IngredientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientResponse {
    return new IngredientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientResponse {
    return new IngredientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientResponse | PlainMessage<IngredientResponse> | undefined, b: IngredientResponse | PlainMessage<IngredientResponse> | undefined): boolean {
    return proto3.util.equals(IngredientResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.IngredientRetrieveRequest
 */
export class IngredientRetrieveRequest extends Message<IngredientRetrieveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<IngredientRetrieveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.IngredientRetrieveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientRetrieveRequest {
    return new IngredientRetrieveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientRetrieveRequest {
    return new IngredientRetrieveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientRetrieveRequest {
    return new IngredientRetrieveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientRetrieveRequest | PlainMessage<IngredientRetrieveRequest> | undefined, b: IngredientRetrieveRequest | PlainMessage<IngredientRetrieveRequest> | undefined): boolean {
    return proto3.util.equals(IngredientRetrieveRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.MetierDestroyRequest
 */
export class MetierDestroyRequest extends Message<MetierDestroyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MetierDestroyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.MetierDestroyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetierDestroyRequest {
    return new MetierDestroyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetierDestroyRequest {
    return new MetierDestroyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetierDestroyRequest {
    return new MetierDestroyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetierDestroyRequest | PlainMessage<MetierDestroyRequest> | undefined, b: MetierDestroyRequest | PlainMessage<MetierDestroyRequest> | undefined): boolean {
    return proto3.util.equals(MetierDestroyRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.MetierListRequest
 */
export class MetierListRequest extends Message<MetierListRequest> {
  constructor(data?: PartialMessage<MetierListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.MetierListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetierListRequest {
    return new MetierListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetierListRequest {
    return new MetierListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetierListRequest {
    return new MetierListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetierListRequest | PlainMessage<MetierListRequest> | undefined, b: MetierListRequest | PlainMessage<MetierListRequest> | undefined): boolean {
    return proto3.util.equals(MetierListRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.MetierListResponse
 */
export class MetierListResponse extends Message<MetierListResponse> {
  /**
   * @generated from field: repeated dofus_market.grpc_market.MetierResponse results = 1;
   */
  results: MetierResponse[] = [];

  constructor(data?: PartialMessage<MetierListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.MetierListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: MetierResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetierListResponse {
    return new MetierListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetierListResponse {
    return new MetierListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetierListResponse {
    return new MetierListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetierListResponse | PlainMessage<MetierListResponse> | undefined, b: MetierListResponse | PlainMessage<MetierListResponse> | undefined): boolean {
    return proto3.util.equals(MetierListResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.MetierPartialUpdateRequest
 */
export class MetierPartialUpdateRequest extends Message<MetierPartialUpdateRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string _partial_update_fields = 2;
   */
  PartialUpdateFields: string[] = [];

  constructor(data?: PartialMessage<MetierPartialUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.MetierPartialUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "_partial_update_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetierPartialUpdateRequest {
    return new MetierPartialUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetierPartialUpdateRequest {
    return new MetierPartialUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetierPartialUpdateRequest {
    return new MetierPartialUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetierPartialUpdateRequest | PlainMessage<MetierPartialUpdateRequest> | undefined, b: MetierPartialUpdateRequest | PlainMessage<MetierPartialUpdateRequest> | undefined): boolean {
    return proto3.util.equals(MetierPartialUpdateRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.MetierRequest
 */
export class MetierRequest extends Message<MetierRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MetierRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.MetierRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetierRequest {
    return new MetierRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetierRequest {
    return new MetierRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetierRequest {
    return new MetierRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetierRequest | PlainMessage<MetierRequest> | undefined, b: MetierRequest | PlainMessage<MetierRequest> | undefined): boolean {
    return proto3.util.equals(MetierRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.MetierResponse
 */
export class MetierResponse extends Message<MetierResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MetierResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.MetierResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetierResponse {
    return new MetierResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetierResponse {
    return new MetierResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetierResponse {
    return new MetierResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetierResponse | PlainMessage<MetierResponse> | undefined, b: MetierResponse | PlainMessage<MetierResponse> | undefined): boolean {
    return proto3.util.equals(MetierResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.MetierRetrieveRequest
 */
export class MetierRetrieveRequest extends Message<MetierRetrieveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MetierRetrieveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.MetierRetrieveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetierRetrieveRequest {
    return new MetierRetrieveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetierRetrieveRequest {
    return new MetierRetrieveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetierRetrieveRequest {
    return new MetierRetrieveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetierRetrieveRequest | PlainMessage<MetierRetrieveRequest> | undefined, b: MetierRetrieveRequest | PlainMessage<MetierRetrieveRequest> | undefined): boolean {
    return proto3.util.equals(MetierRetrieveRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RecetteDestroyRequest
 */
export class RecetteDestroyRequest extends Message<RecetteDestroyRequest> {
  /**
   * @generated from field: string ingredient = 1;
   */
  ingredient = "";

  constructor(data?: PartialMessage<RecetteDestroyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RecetteDestroyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecetteDestroyRequest {
    return new RecetteDestroyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecetteDestroyRequest {
    return new RecetteDestroyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecetteDestroyRequest {
    return new RecetteDestroyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecetteDestroyRequest | PlainMessage<RecetteDestroyRequest> | undefined, b: RecetteDestroyRequest | PlainMessage<RecetteDestroyRequest> | undefined): boolean {
    return proto3.util.equals(RecetteDestroyRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RecetteListRequest
 */
export class RecetteListRequest extends Message<RecetteListRequest> {
  constructor(data?: PartialMessage<RecetteListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RecetteListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecetteListRequest {
    return new RecetteListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecetteListRequest {
    return new RecetteListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecetteListRequest {
    return new RecetteListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecetteListRequest | PlainMessage<RecetteListRequest> | undefined, b: RecetteListRequest | PlainMessage<RecetteListRequest> | undefined): boolean {
    return proto3.util.equals(RecetteListRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RecetteListResponse
 */
export class RecetteListResponse extends Message<RecetteListResponse> {
  /**
   * @generated from field: repeated dofus_market.grpc_market.RecetteResponse results = 1;
   */
  results: RecetteResponse[] = [];

  constructor(data?: PartialMessage<RecetteListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RecetteListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: RecetteResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecetteListResponse {
    return new RecetteListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecetteListResponse {
    return new RecetteListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecetteListResponse {
    return new RecetteListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RecetteListResponse | PlainMessage<RecetteListResponse> | undefined, b: RecetteListResponse | PlainMessage<RecetteListResponse> | undefined): boolean {
    return proto3.util.equals(RecetteListResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RecettePartialUpdateRequest
 */
export class RecettePartialUpdateRequest extends Message<RecettePartialUpdateRequest> {
  /**
   * @generated from field: string ingredient = 1;
   */
  ingredient = "";

  /**
   * @generated from field: optional int32 level = 3;
   */
  level?: number;

  /**
   * @generated from field: optional string metier = 4;
   */
  metier?: string;

  /**
   * @generated from field: repeated int64 ingredients = 5;
   */
  ingredients: bigint[] = [];

  /**
   * @generated from field: repeated string _partial_update_fields = 6;
   */
  PartialUpdateFields: string[] = [];

  constructor(data?: PartialMessage<RecettePartialUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RecettePartialUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "metier", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "ingredients", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 6, name: "_partial_update_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecettePartialUpdateRequest {
    return new RecettePartialUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecettePartialUpdateRequest {
    return new RecettePartialUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecettePartialUpdateRequest {
    return new RecettePartialUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecettePartialUpdateRequest | PlainMessage<RecettePartialUpdateRequest> | undefined, b: RecettePartialUpdateRequest | PlainMessage<RecettePartialUpdateRequest> | undefined): boolean {
    return proto3.util.equals(RecettePartialUpdateRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RecetteRequest
 */
export class RecetteRequest extends Message<RecetteRequest> {
  /**
   * @generated from field: string ingredient = 1;
   */
  ingredient = "";

  /**
   * @generated from field: optional int32 level = 2;
   */
  level?: number;

  /**
   * @generated from field: optional string metier = 3;
   */
  metier?: string;

  /**
   * @generated from field: repeated int64 ingredients = 4;
   */
  ingredients: bigint[] = [];

  constructor(data?: PartialMessage<RecetteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RecetteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "metier", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "ingredients", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecetteRequest {
    return new RecetteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecetteRequest {
    return new RecetteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecetteRequest {
    return new RecetteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecetteRequest | PlainMessage<RecetteRequest> | undefined, b: RecetteRequest | PlainMessage<RecetteRequest> | undefined): boolean {
    return proto3.util.equals(RecetteRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RecetteResponse
 */
export class RecetteResponse extends Message<RecetteResponse> {
  /**
   * @generated from field: string ingredient = 1;
   */
  ingredient = "";

  /**
   * @generated from field: optional int32 level = 2;
   */
  level?: number;

  /**
   * @generated from field: optional string metier = 3;
   */
  metier?: string;

  /**
   * @generated from field: repeated int64 ingredients = 4;
   */
  ingredients: bigint[] = [];

  constructor(data?: PartialMessage<RecetteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RecetteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "metier", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "ingredients", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecetteResponse {
    return new RecetteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecetteResponse {
    return new RecetteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecetteResponse {
    return new RecetteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RecetteResponse | PlainMessage<RecetteResponse> | undefined, b: RecetteResponse | PlainMessage<RecetteResponse> | undefined): boolean {
    return proto3.util.equals(RecetteResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RecetteRetrieveRequest
 */
export class RecetteRetrieveRequest extends Message<RecetteRetrieveRequest> {
  /**
   * @generated from field: string ingredient = 1;
   */
  ingredient = "";

  constructor(data?: PartialMessage<RecetteRetrieveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RecetteRetrieveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecetteRetrieveRequest {
    return new RecetteRetrieveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecetteRetrieveRequest {
    return new RecetteRetrieveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecetteRetrieveRequest {
    return new RecetteRetrieveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecetteRetrieveRequest | PlainMessage<RecetteRetrieveRequest> | undefined, b: RecetteRetrieveRequest | PlainMessage<RecetteRetrieveRequest> | undefined): boolean {
    return proto3.util.equals(RecetteRetrieveRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RuneDestroyRequest
 */
export class RuneDestroyRequest extends Message<RuneDestroyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<RuneDestroyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RuneDestroyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuneDestroyRequest {
    return new RuneDestroyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuneDestroyRequest {
    return new RuneDestroyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuneDestroyRequest {
    return new RuneDestroyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RuneDestroyRequest | PlainMessage<RuneDestroyRequest> | undefined, b: RuneDestroyRequest | PlainMessage<RuneDestroyRequest> | undefined): boolean {
    return proto3.util.equals(RuneDestroyRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RuneListRequest
 */
export class RuneListRequest extends Message<RuneListRequest> {
  constructor(data?: PartialMessage<RuneListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RuneListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuneListRequest {
    return new RuneListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuneListRequest {
    return new RuneListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuneListRequest {
    return new RuneListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RuneListRequest | PlainMessage<RuneListRequest> | undefined, b: RuneListRequest | PlainMessage<RuneListRequest> | undefined): boolean {
    return proto3.util.equals(RuneListRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RuneListResponse
 */
export class RuneListResponse extends Message<RuneListResponse> {
  /**
   * @generated from field: repeated dofus_market.grpc_market.RuneResponse results = 1;
   */
  results: RuneResponse[] = [];

  constructor(data?: PartialMessage<RuneListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RuneListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: RuneResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuneListResponse {
    return new RuneListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuneListResponse {
    return new RuneListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuneListResponse {
    return new RuneListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RuneListResponse | PlainMessage<RuneListResponse> | undefined, b: RuneListResponse | PlainMessage<RuneListResponse> | undefined): boolean {
    return proto3.util.equals(RuneListResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RunePartialUpdateRequest
 */
export class RunePartialUpdateRequest extends Message<RunePartialUpdateRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional int32 prix_ra = 3;
   */
  prixRa?: number;

  /**
   * @generated from field: optional int32 prix_pa = 4;
   */
  prixPa?: number;

  /**
   * @generated from field: optional int32 prix_ba = 5;
   */
  prixBa?: number;

  /**
   * @generated from field: repeated string _partial_update_fields = 6;
   */
  PartialUpdateFields: string[] = [];

  constructor(data?: PartialMessage<RunePartialUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RunePartialUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prix_ra", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "prix_pa", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "prix_ba", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "_partial_update_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunePartialUpdateRequest {
    return new RunePartialUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunePartialUpdateRequest {
    return new RunePartialUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunePartialUpdateRequest {
    return new RunePartialUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunePartialUpdateRequest | PlainMessage<RunePartialUpdateRequest> | undefined, b: RunePartialUpdateRequest | PlainMessage<RunePartialUpdateRequest> | undefined): boolean {
    return proto3.util.equals(RunePartialUpdateRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RuneRequest
 */
export class RuneRequest extends Message<RuneRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional int32 prix_ra = 2;
   */
  prixRa?: number;

  /**
   * @generated from field: optional int32 prix_pa = 3;
   */
  prixPa?: number;

  /**
   * @generated from field: optional int32 prix_ba = 4;
   */
  prixBa?: number;

  constructor(data?: PartialMessage<RuneRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RuneRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prix_ra", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "prix_pa", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "prix_ba", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuneRequest {
    return new RuneRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuneRequest {
    return new RuneRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuneRequest {
    return new RuneRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RuneRequest | PlainMessage<RuneRequest> | undefined, b: RuneRequest | PlainMessage<RuneRequest> | undefined): boolean {
    return proto3.util.equals(RuneRequest, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RuneResponse
 */
export class RuneResponse extends Message<RuneResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional int32 prix_ra = 2;
   */
  prixRa?: number;

  /**
   * @generated from field: optional int32 prix_pa = 3;
   */
  prixPa?: number;

  /**
   * @generated from field: optional int32 prix_ba = 4;
   */
  prixBa?: number;

  constructor(data?: PartialMessage<RuneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RuneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prix_ra", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "prix_pa", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "prix_ba", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuneResponse {
    return new RuneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuneResponse {
    return new RuneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuneResponse {
    return new RuneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RuneResponse | PlainMessage<RuneResponse> | undefined, b: RuneResponse | PlainMessage<RuneResponse> | undefined): boolean {
    return proto3.util.equals(RuneResponse, a, b);
  }
}

/**
 * @generated from message dofus_market.grpc_market.RuneRetrieveRequest
 */
export class RuneRetrieveRequest extends Message<RuneRetrieveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<RuneRetrieveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dofus_market.grpc_market.RuneRetrieveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuneRetrieveRequest {
    return new RuneRetrieveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuneRetrieveRequest {
    return new RuneRetrieveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuneRetrieveRequest {
    return new RuneRetrieveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RuneRetrieveRequest | PlainMessage<RuneRetrieveRequest> | undefined, b: RuneRetrieveRequest | PlainMessage<RuneRetrieveRequest> | undefined): boolean {
    return proto3.util.equals(RuneRetrieveRequest, a, b);
  }
}

