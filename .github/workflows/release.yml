name: Release Charts

on:
  push:
    branches:
      - main
    tags-ignore:
      - "release/*"

jobs:
  release:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Release
        id: release
        run: |
          npx semantic-release | tee release-output.txt
          VERSION=$(grep 'Published release' release-output.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Update Helm chart version
        run: |
          echo "Using version: ${{ steps.release.outputs.version }}"
          sed -i "s/^version: .*/version: ${{ steps.release.outputs.version }}/g" deploy/charts/Chart.yaml
          cat deploy/charts/Chart.yaml

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          charts_dir: deploy

  docker:
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        include:
          - image: chapellu/dofus-market-backend
            context: backend
            dockerfile: backend/deploy/Dockerfile
          - image: chapellu/dofus-market-frontend
            context: frontend
            dockerfile: frontend/deploy/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        id: prep
        run: |
          BRANCH=${GITHUB_REF##*/}
          TS=$(date +%s)
          REVISION=${GITHUB_SHA::8}
          BUILD_ID="${BRANCH}-${REVISION}-${TS}"
          LATEST_ID=canary
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_ID=${GITHUB_REF/refs\/tags\//}
            LATEST_ID=latest
          fi
          echo BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') >> $GITHUB_OUTPUT
          echo BUILD_ID=${BUILD_ID} >> $GITHUB_OUTPUT
          echo LATEST_ID=${LATEST_ID} >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ matrix.image }}:${{ steps.prep.outputs.BUILD_ID }}
            ${{ matrix.image }}:${{ steps.prep.outputs.LATEST_ID }}
            ${{ matrix.image }}:${{ needs.release.outputs.version }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
